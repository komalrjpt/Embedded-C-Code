/******************************************************************************

                            Online C Compiler.
                Code, Compile, Run and Debug C program online.
Write your code in this editor and press "Run" button to compile and execute it.

*******************************************************************************/

//this is just binary reersal display code.its not actually reversing that no.Corrected code is below this code


#include <stdio.h>
#include<stdint.h>

void extractpositionbits(uint32_t n)
{   uint32_t k; uint32_t l=0;
    int i,j=31,bin;
  
while(l<2)
{switch (l)
{
case (0):
for(i=31;i>=0;i--) 
     {   bin=((n>>i)&1);
          printf("%u",bin);
         }
printf("\n");         
break;
case (1):         
for(i=0;i<=31;i++)
{
    bin=((n>>i)&1);
    printf("%u",bin) ;
    
}
break;
    
}
l++;
}       
}
int main()
{   uint32_t n=5;
    extractpositionbits(n);
    return 0;
}



CORRECTED:
#include <stdio.h>
#include <stdint.h>

// Function to reverse the binary bits of a 32-bit integer
uint32_t reverseBits(uint32_t n) {
    uint32_t result = 0;
    for (int i = 0; i < 32; i++) {
        result <<= 1;           // Make space for next bit
        result |= (n & 1);      // Copy LSB of n into result
        n >>= 1;                // Shift n right to process next bit
    }
    return result;
}

// Helper function to print binary of 32-bit number
void printBinary(uint32_t n) {
    for (int i = 31; i >= 0; i--) {
        printf("%d", (n >> i) & 1);
        if (i % 8 == 0) printf(" "); // for readability
    }
}

int main() {
    uint32_t num = 13; // Example input
    printf("Original binary: ");
    printBinary(num);

    uint32_t reversed = reverseBits(num);
    printf("\nReversed binary: ");
    printBinary(reversed);

    printf("\nReversed number: %u\n", reversed);
    return 0;
}

